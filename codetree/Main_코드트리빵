import java.io.*;
import java.util.*;


public class Main_bbang {
	static int N, M, graph[][], time;
	static ArrayList<int[]> wishList[];
	static ArrayList<int[]> peoplePos[];
	static HashSet<Integer> complete;
	static int dx[] = {-1,0,0,1};
	static int dy[] = {0,-1,1,0};
	
	public static void main(String[] args) throws Exception {
		BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = null;
		st = new StringTokenizer(in.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		graph = new int[N][N];
		complete = new HashSet<>();
		for(int i=0;i<N;i++) {
			st = new StringTokenizer(in.readLine());
			for(int j=0;j<N;j++) {
				graph[i][j] = Integer.parseInt(st.nextToken());
				if(graph[i][j] == 1) graph[i][j] = -1;
			}
		} // 0: 빈공간, -1 : 베이스 캠프, -99: 지나갈 수 없는 곳
		// 1~m번 편의점 좌표, 사람들 위치 -> list로 관리 
		wishList = new ArrayList[M+1];
		for(int i=0;i<=M;i++) {
			wishList[i] = new ArrayList<int[]>();
		}
		for(int i=1;i<=M;i++) {
			st = new StringTokenizer(in.readLine());
			int x = Integer.parseInt(st.nextToken());
			int y = Integer.parseInt(st.nextToken());
			x-=1;y-=1;
			// 사람들이 가고 싶어하는 편의점 위치 x,y 주어진다. 
			graph[x][y] = i; // 사람들이 원하는 편의점 기억
			wishList[i].add(new int[] {x,y});
		}
		// 사람들 위치, 
		peoplePos = new ArrayList[M+1];
		for(int i=0;i<=M;i++) {
			peoplePos[i] = new ArrayList<int[]>();
		}

		while(true) {
			time++;
			moveAll();
			if(time <= M) {
				setBaseCamp(time);				
			}
			
			if(complete.size() == M) {
				System.out.println(time);
				break;
			}
		}
	}

	private static void printGraph() {
		for (int i = 0; i < N; i++) {
			System.out.println(Arrays.toString(graph[i]));
		}
	}

	private static void moveAll() {
		// 격자 위에 있는 사람이 있을때
		// 현재위치에서 편의점으로 가는 가장 가까운 방향으로 1만큼 이동한다.
		// == 원하는 편의점에서 모든 점까지 거리를 측정했을 때 가장 가까운 방향으로 간다.
		int newGraph[][] = new int[N][N];
		for(int i=0;i<N;i++) {
			newGraph[i] = Arrays.copyOf(graph[i], graph[i].length);
		}
		
		for(int id=1;id<=M;id++) {
			if(complete.contains(id)) continue;
			else if(peoplePos[id].isEmpty()) continue;
			else {
				boolean visit[][] = new boolean[N][N];
				int board[][] = new int[N][N];
				for(int i=0;i<N;i++)
					Arrays.fill(board[i], Integer.MAX_VALUE);
				ArrayDeque<int[]> q = new ArrayDeque<>();
				
				int currx = peoplePos[id].get(0)[0];
				int curry = peoplePos[id].get(0)[1];
				
				int destx = wishList[id].get(0)[0];
				int desty = wishList[id].get(0)[1];
				board[destx][desty] = 0;
				q.offer(new int[] {destx, desty});
				while(!q.isEmpty()) {
					int temp[] = q.pollFirst();
					int x = temp[0];
					int y = temp[1];
					visit[x][y] = true;

					for(int i=0;i<4;i++) {
						int nx = x+dx[i];
						int ny = y+dy[i];
						if(nx < 0 || nx >= N || ny < 0 || ny >= N) continue;
						if(graph[nx][ny] == -99) continue;
						if(visit[nx][ny]) continue;
						q.offer(new int[] {nx,ny});
						board[nx][ny] = board[x][y] + 1;
					}
				}
				
				int minCost = Integer.MAX_VALUE;
				int nextx = -1;
				int nexty = -1;
				for(int i=0;i<4;i++) {
					int nx = currx+dx[i];
					int ny = curry+dy[i];
					if(nx < 0 || nx >= N || ny < 0 || ny >= N) continue;
					if(board[nx][ny] < minCost) {
						minCost = board[nx][ny];
						nextx = nx;
						nexty = ny;
					}
				}
				if(graph[nextx][nexty] == id) {
					newGraph[nextx][nexty] = -99;
					peoplePos[id].remove(0);
					complete.add(id);
				}else {
					peoplePos[id].set(0, new int[] {nextx, nexty});
				}
			}
		}
		for(int i=0;i<N;i++) {
			graph[i] = Arrays.copyOf(newGraph[i], newGraph[i].length);
		}
	}

	private static void setBaseCamp(int id) {
		// 목표 편의점 위치
		int dest[] = wishList[id].get(0);
		
		// 편의점에서 가장 가까운 베이스 캠프 찾는다.
		boolean visit[][] = new boolean[N][N];
		ArrayDeque<int[]> q = new ArrayDeque<>();
		q.offer(dest);
		visit[dest[0]][dest[1]] = true;
		while(!q.isEmpty()) {
			int temp[] = q.pollFirst();
			int x = temp[0];
			int y = temp[1];
			
			if(graph[x][y] == -1) {
				peoplePos[id].add(0, new int[] {x,y});
				graph[x][y] = -99;//베이스캠프 못지나가게 한다.
				return;
			}
			
			for(int i=0;i<4;i++) {
				int nx = x+dx[i];
				int ny = y+dy[i];
				if(nx < 0 || nx >= N || ny < 0 || ny >= N) continue;
				if(visit[nx][ny]) continue;
				if(graph[nx][ny] == -99) continue;
				
				q.offer(new int[] {nx,ny});
				visit[nx][ny] = true;
			}
		}
	}
}
