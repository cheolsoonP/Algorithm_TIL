"""
어항을 정리한다
정육면체 모양,
어항은 n개
처음 어항은 일렬로 놓임
어항에는 물고기가 한마리 이상
어항에 있는 물고기수 써있다.

어항 정리 과정
1. 물고기 수 가장 적은 어항에 무록기 한마리 넣는다, 같은 수의 물고기가 있는 어항이라면
같은 수 물고기 있는 어항 다 1마리씩 넣어준다.

2. 어항을 쌓는다. 가장 왼쪽 어항을 오른쪽 어항 위에 올린다.
2개 이상 쌓인 어항을 들어올려, 전체를 시계방향으로 90도 돌린다.
그 어항을 바닥에 있는 어항위에 올린다
들어올린 어항 중 가장 오른쪽에 있는 어항의 아래에 바닥에 있는 어항이 있을 때까지 반복한다.

3. 어항 쌓기가 끝나면, 어항에 물고기 수 조절한다
모든 인접한 두 어항에 대해서 물고기 수 차이를 구한다
차이를 5로 나눈 몫을 d라고 하면,
d > 0 이면 두 어항 중 물고기가 많은 곳에 있는 물고기 d마리를 -> 적게 들어 있는 어항으로 보낸다
인접칸에 대해서 동시에 발생한다. / 각각에서 상하좌우를 비교, +d, -d인지 체크, /

4. 어항을 바닥에 일렬로 놓는다. 가장 왼쪽, 아래 부터 위, 오른쪽으로 순서대로 놓는다.

5. 다시 공중 부양 작업, 가운데를 중심으로 , 왼쪽 n/2개를 시계방향으로 180도 회전해서 오른쪽 n/2위에 놓는다
이 작업을 두번 반복한다.
바닥에 어항의 수는 n/4개가 된다.

6. 다시 물고기 수 조절을 한다.

7. 바닥에 놓는다. (왼쪽 아래부터, 위, 오른쪽으로 진행)

입력
어항 수 n, 가장 많은 물고기 어항 - 가장 적은 물고기 어항 <= k 되면 종료, 어항 정리 횟수
첫째 줄에 N, K가 주어진다.
둘째에는 어항에 들어있는 물고기의 수가 가장 왼쪽에 있는 어항부터 순서대로 주어진다.

둘째에는 어항에 들어있는 물고기의 수가 가장 왼쪽에 있는 어항부터 순서대로 주어진다.

출력
 물고기가 가장 많이 들어있는 어항과
 가장 적게 들어있는 어항의 물고기 수
 차이가 K 이하가 되려면 어항을 몇 번 정리해야하는지 출력한다.

4 ≤ N ≤ 100
N은 4의 배수
0 ≤ K ≤ 10
1 ≤ 각 어항에 들어있는 물고기의 수 ≤ 10,000

"""

n, k = map(int, input().split())
pool = []
pool.append(list(map(int, input().split())))

# 1. 물고기 수 가장 적은 어항에 무록기 한마리 넣는다, 같은 수의 물고기가 있는 어항이라면
# 같은 수 물고기 있는 어항 다 1마리씩 넣어준다.
def add_fish():
    min_fish = 1e9
    for i in range(n):
        min_fish = min(min_fish, pool[i])
    for i in range(n):
        if pool[i] == min_fish:
            pool[i] += 1

def rotate_cube(cube):
    sub_cube = [[] * n for _ in range(n)]
    for i in range(n):
        for j in range(n):
            if cube[i][j]:
                sub_cube[j][i] = cube[i][j]
    return sub_cube


# 2. 어항을 쌓는다. 가장 왼쪽 어항을 오른쪽 어항 위에 올린다.
# 2개 이상 쌓인 어항을 들어올려, 전체를 시계방향으로 90도 돌린다.
# 그 어항을 바닥에 있는 어항위에 올린다
# 들어올린 어항 중 가장 오른쪽에 있는 어항의 아래에 바닥에 있는 어항이 있을 때까지 반복한다.
def rotate_pool():
    temp = [[] * n for _ in range(n)]

    for i in range(n):
        cube = [[] * pow(2, i) for _ in range(pow(2, i))]
        cube = temp[]

    cube = temp[:][0]
    temp -= temp[1][1:]
    print(temp)
    # # sub cube는 회전된 큐브
    # sub_cube = rotate_cube(cube)

rotate_pool()