import java.util.*;
import java.io.*;


public class Solution_Day3_Heap_중간값구하기 {
	/*
	 * 처음 한개의 자연수를 공책에 적는다
	 * N번에 거쳐서 자연수 2개씩 추가로 적는다. 
	 * 2개를 추가적으로 적을 때마다 지금까지 적은 수 중에 중간값을 알려준다
	 * 작은 쪽 절반+1개, 큰쪽 절반
	 * 작은쪽의 가장 큰 값이 중간값이다. 
	 * 양쪽에 하나씩 넣고
	 * 가장 작은쪽의 가장 큰값이
	 * */
	public static void main(String[] args) throws Exception {
		BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = null;
		StringBuilder sb = new StringBuilder();
		
		
		int T = Integer.parseInt(in.readLine());
		for(int tc=1;tc<=T;tc++) {
			int result = 0;
			st = new StringTokenizer(in.readLine());
			int N = Integer.parseInt(st.nextToken());
			int A = Integer.parseInt(st.nextToken());
			
			PriorityQueue<Integer> leftH = new PriorityQueue<>();
			PriorityQueue<Integer> rightH = new PriorityQueue<>();
			
			leftH.add(-A);
			
			int x,y;
			int mid = 0;
			for(int i=0;i<N;i++) {
				st = new StringTokenizer(in.readLine());
				x = Integer.parseInt(st.nextToken());
				y = Integer.parseInt(st.nextToken());
				leftH.add(-x);
				rightH.add(y);//가장 작은 값이 루트노드로 유지한다. 
				
				while(true) {
					int a = -leftH.peek();
					int b = rightH.peek();
					
					if(a <= b) {
						break;
					}else {
						a = -leftH.poll();
						b = rightH.poll();
						leftH.add(-b);
						rightH.add(a);
					}
				}
				mid = -leftH.peek();
				result = (result + mid) % 20171109;
			}
			
			sb.append("#"+tc+" "+result+'\n');
		}
		System.out.println(sb);
	}
}



